#!/usr/bin/env python3
"""
Script de diagn√≥stico para problemas de acceso a datos hist√≥ricos
en el WelcomeScreen del scheduler.
"""

import os
import sys
import json

def test_path_access():
    print("üîç DIAGN√ìSTICO DE ACCESO A DATOS HIST√ìRICOS")
    print("=" * 60)
    
    # 1. Informaci√≥n del entorno
    print("üìç INFORMACI√ìN DEL ENTORNO:")
    print(f"‚Ä¢ Directorio de trabajo actual: {os.getcwd()}")
    print(f"‚Ä¢ Directorio del script: {os.path.dirname(os.path.abspath(__file__))}")
    print(f"‚Ä¢ Ruta de Python: {sys.executable}")
    print("")
    
    # 2. Probar diferentes rutas posibles
    print("üîé PROBANDO RUTAS POSIBLES:")
    possible_paths = [
        '/workspaces/10/historical_data/consolidated_history.json',
        './historical_data/consolidated_history.json',
        'historical_data/consolidated_history.json',
        os.path.join(os.path.dirname(__file__), 'historical_data', 'consolidated_history.json'),
        os.path.join(os.getcwd(), 'historical_data', 'consolidated_history.json')
    ]
    
    found_path = None
    for i, path in enumerate(possible_paths, 1):
        exists = os.path.exists(path)
        print(f"{i}. {path}")
        print(f"   {'‚úÖ EXISTE' if exists else '‚ùå NO EXISTE'}")
        if exists and not found_path:
            found_path = path
        print("")
    
    # 3. Listar contenido del directorio actual
    print("üìÅ CONTENIDO DEL DIRECTORIO ACTUAL:")
    try:
        current_items = os.listdir(os.getcwd())
        directories = [item for item in current_items if os.path.isdir(item)]
        files = [item for item in current_items if os.path.isfile(item)]
        
        print(f"‚Ä¢ Directorios: {', '.join(directories[:10])}")
        print(f"‚Ä¢ Archivos: {', '.join(files[:10])}")
        
        # Comprobar espec√≠ficamente si existe historical_data
        if 'historical_data' in directories:
            print("‚úÖ Directorio 'historical_data' ENCONTRADO")
            hist_contents = os.listdir('historical_data')
            print(f"‚Ä¢ Contenido de historical_data: {len(hist_contents)} archivos")
            json_files = [f for f in hist_contents if f.endswith('.json')]
            print(f"‚Ä¢ Archivos JSON: {len(json_files)}")
            if 'consolidated_history.json' in hist_contents:
                print("‚úÖ consolidated_history.json ENCONTRADO")
            else:
                print("‚ùå consolidated_history.json NO ENCONTRADO")
        else:
            print("‚ùå Directorio 'historical_data' NO ENCONTRADO")
    except Exception as e:
        print(f"‚ùå Error listando directorio: {e}")
    
    print("")
    
    # 4. Si encontramos una ruta v√°lida, probar leer los datos
    if found_path:
        print("üìä PROBANDO LECTURA DE DATOS:")
        print(f"‚Ä¢ Usando ruta: {found_path}")
        try:
            with open(found_path, 'r') as f:
                data = json.load(f)
            
            records = data.get('records', [])
            print(f"‚úÖ Datos cargados exitosamente")
            print(f"‚Ä¢ Registros encontrados: {len(records)}")
            
            if records:
                latest = records[-1]
                timestamp = latest.get('timestamp', 'N/A')
                coverage = latest.get('coverage_metrics', {}).get('overall_coverage', 'N/A')
                print(f"‚Ä¢ √öltimo timestamp: {timestamp}")
                print(f"‚Ä¢ √öltima cobertura: {coverage}")
                
                # Test de la funci√≥n de estad√≠sticas
                print("")
                print("üß™ SIMULANDO FUNCI√ìN DE ESTAD√çSTICAS:")
                try:
                    result = simulate_statistics_function(found_path)
                    print("‚úÖ Funci√≥n de estad√≠sticas ejecutada correctamente")
                    print(f"‚Ä¢ Resultado: {len(result)} caracteres generados")
                except Exception as e:
                    print(f"‚ùå Error en funci√≥n de estad√≠sticas: {e}")
            
        except Exception as e:
            print(f"‚ùå Error leyendo datos: {e}")
    else:
        print("‚ùå NO SE ENCONTR√ì NINGUNA RUTA V√ÅLIDA")
        print("")
        print("üí° POSIBLES SOLUCIONES:")
        print("1. Ejecutar el script desde el directorio /workspaces/10")
        print("2. Verificar que el directorio historical_data existe")
        print("3. Generar algunos horarios para crear datos hist√≥ricos")
    
    print("")
    print("=" * 60)

def simulate_statistics_function(path):
    """Simula la funci√≥n _load_historical_statistics"""
    import json
    
    with open(path, 'r') as f:
        history = json.load(f)
    
    records = history.get('records', [])
    if not records:
        return "No hay registros hist√≥ricos"
    
    # Analyze historical data
    latest_record = records[-1]
    total_records = len(records)
    
    # Get metrics from latest record
    coverage_metrics = latest_record.get('coverage_metrics', {})
    
    # Calculate averages across all records
    avg_coverage = sum(r.get('coverage_metrics', {}).get('overall_coverage', 0) for r in records) / total_records
    avg_efficiency = sum(r.get('efficiency_score', 0) for r in records) / total_records
    
    # Latest period info
    period = latest_record.get('schedule_period', {})
    
    result = f"""üìä Estad√≠sticas Hist√≥ricas del Sistema:

üìà Resumen General:
‚Ä¢ Total de registros hist√≥ricos: {total_records}
‚Ä¢ Cobertura promedio: {avg_coverage:.1f}%
‚Ä¢ Eficiencia promedio: {avg_efficiency:.1f}%
‚Ä¢ √öltimo per√≠odo: {period.get('start_date', 'N/A')[:10]} - {period.get('end_date', 'N/A')[:10]}

üéØ √öltimo Horario Registrado:
‚Ä¢ Cobertura general: {coverage_metrics.get('overall_coverage', 0):.1f}%
‚Ä¢ Espacios cr√≠ticos sin cubrir: {len(coverage_metrics.get('critical_gaps', []))}
‚Ä¢ Patrones estacionales detectados: ‚úì
‚Ä¢ An√°lisis de trabajadores disponible: ‚úì

üí° M√©tricas Avanzadas:
‚Ä¢ Sistema de validaci√≥n: Activo
‚Ä¢ Motor de tiempo real: Disponible
‚Ä¢ IA Predictiva: Con {total_records} registros de entrenamiento
‚Ä¢ Historial consolidado: Actualizado"""
    
    return result

if __name__ == "__main__":
    test_path_access()